***AULA01
Diretório com espaço o kafta "se perde"
Necessário baixar o zookeeper, no entanto o kafta ja vem com um zookeeper instalado

**Iniciar o zookeeper (utilizado para algumas configurações)

bin\windows\zookeeper-server-start.bat ..\..\config\zookeeper.properties

**Inicializar kafka
kafka-server-start.bat ..\..\config\server.properties

-Recomentação é que . e underline não se usam ao mesmo tempo para os nomes.
-Criando topico LOJA_NOVO_PEDIDO

kafka-topics.bat --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic LOJA_NOVO_PEDIDO

-Listando tópicos
kafka-topics.bat --list --bootstrap-server localhost:9092

-Criando um produtor
kafka-console-producer.bat --broker-list localhost:9092 --topic LOJA_NOVO_PEDIDO

Na sequencia cada linha digitada é uma mensagem.

-Criando um consumidor
kafka-console-consumer --bootstrap-server localhost:9092 --topic LOJA_NOVO_PEDIDO

Aqui falta definir a partir de quando as mensagens serão lidas

-Criando consumidor e definindo a partir de aundo as mensagens serão lidas
kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic LOJA_NOVO_PEDIDO --from-beginning

-Descrevendo os detalhes dos tópicos
kafka-topics.bat --bootstrap-server localhost:9092 --describe

*Definindo um group id, indica que o consumidor deverá receber todas as mensagens, se houver outro consumidor com outro group id, este tambem irá receber todas as mensagens. No entanto, se mais de um consumidor tiver um group id, as mensagens serão distribuidas entre estes consumidores.

*O que aprendemos nessa aula:

O que são produtores
O que são consumidores
Criação de tópicos manualmente
Como instalar e rodar o Kafka

***AULA02
Incluido consumidor LogService que monitora as mensagens conforme a expressão regular passada no parâmetro.

Se você têm dois consumidores para o mesmo grupo, a mensagem será enviada para o grupo, porém só um dos consumidores dos mesmo grupo irá receber. Se os dois recebecem a mesagem seria processada duas vezes.

As partições informam ao kafka comom que ele balanceará as mensagens detro do mesmo grupo. 

- O padrão kafta configura uma partição, o consumidor se responsabiliza por várias partes, no entanto, como só estamos trabalhando com uma parte, ele se responsabiliza pra essa parte. Sintetizando, cada consumidor fica com uma partição.
- O número máximo de paralelização será o número de partições.
Comando exemplo para reparticionar:

kafka-topics.bat --alter --zookeeper localhost:2181 --topic ECOMMERCE_NEW_ORDER --partitions 3

Configurando o kafka com três partições e dois consumidores, é preciso configurar uma chave, já que é a chave que o kafka usa pra decidir qual partição irá receberá a mensagem(sendo que cada consumidor do grupo é reponsável por uma ou mais partições)

Por exemplo três partições e dois consumidores, o c1 ficara com uma partição e o c2 ficará com as duas restantes, a decisão é do kafka. O kafka também utiliza a chave utilizada no produtor pra definir em qual partição irá cair.

O número de partições deve ser maior ou igual ao número de consumidores do mesmo grupo.

As partições são configuradas no arquivo server.properties
num.partitions=3

* Cada grupo de consumo recebe todas as mensagens;
* Dentro de um grupo quando chega uma mensagem, essa mensagem chegará apenas em um consumidor deste grupo;
* Balanceamento é feito atraves das partições;
* O número máximo de paralelização é igual ao número de partições;
* O kafka utiliza a chave para definir em qual partição a mensagem será armazenada.
Comando para descrever os consumidores

kafka-consumer-groups.bat --bootstrap-server localhost:9092 --describe --all-groups

** MAX POLL
Para evitar que quando ocorra o rebalanceamento as mensagens não fiquem pendentes de commit pelos consumidores é possivel diminuir o tempo de commit. Podemos configurar que de no máximo de uma em uma mensagem seja realizado o commit.

Diminui a chance de processar duas vezes a mesma mensagem por que falhou o commit. A maioria das empresas usa valor 1 nesta propriedade para garantir o commit, se deixar sem valor, o kafka define a partir de quantas mensagens recebidas será feito o commit. 

O que aprendemos nessa aula:

Como rodar diversos consumidores no mesmo grupo
Como paralelizar tarefas
A importância da chave para hash
Cuidado com poll longo



